import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Step 1: Generate synthesized data
X, _ = make_blobs(n_samples=200, centers=3, cluster_std=0.60, random_state=0)

# Step 2: Plot the original data
plt.figure(figsize=(16, 10))

# Original Data Plot
plt.subplot(2, 2, 1)
plt.scatter(X[:, 0], X[:, 1], s=50)
plt.title('Original Data Plot')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.grid()

# Step 3: Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Standardized Data Plot
plt.subplot(2, 2, 2)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], s=50, color='orange')
plt.title('Standardized Data Plot')
plt.xlabel('Standardized Feature 1')
plt.ylabel('Standardized Feature 2')
plt.grid()

# Step 4: Find the value of K using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=0)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Elbow Graph for identifying the number of clusters
plt.subplot(2, 2, 3)
plt.plot(range(1, 11), wcss, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('WCSS (Within-cluster Sum of Squares)')
plt.grid()

# Step 5: Apply K-Means clustering with the optimal K value (let's assume k=3)
optimal_k = 3  # You can set this based on the Elbow graph
kmeans = KMeans(n_clusters=optimal_k, random_state=0)
y_kmeans = kmeans.fit_predict(X_scaled)

# Final K-Means Clustering Plot
plt.subplot(2, 2, 4)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=y_kmeans, s=50, cmap='viridis')
centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75, marker='X')
plt.title(f'K-Means Clustering (n={optimal_k})')
plt.xlabel('Standardized Feature 1')
plt.ylabel('Standardized Feature 2')
plt.grid()

plt.tight_layout()
plt.show()
